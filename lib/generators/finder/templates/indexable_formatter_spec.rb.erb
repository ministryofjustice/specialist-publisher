require "spec_helper"
require "spec/exporters/formatters/abstract_indexable_formatter_spec"
require "spec/exporters/formatters/abstract_specialist_document_indexable_formatter_spec"
require "formatters/aaib_report_indexable_formatter"

RSpec.describe <%= class_name %>IndexableFormatter do
  let(:document) {
    double(
      :<%= name.underscore%>,
      body: double,
      slug: "/slug",
      summary: double,
      title: double,
      updated_at: double,
      minor_update?: false,
      public_updated_at: double,
<% @document_attributes.each_with_index do |attribute, index| %>
      <%= attribute %>: <% if @rummager_types[index] && @rummager_types[index][/identifiers/] %>[double]<% else %>double<% end %>,<% end %>
    )
  }

  subject(:formatter) { <%= class_name %>IndexableFormatter.new(document) }

  include_context "schema available"

  it_should_behave_like "a specialist document indexable formatter"

  it "should have a type of <%= name.underscore%>" do
    expect(formatter.type).to eq("<%= name.underscore%>")
  end<% if options[:hidden_indexable_content] %>

  context "without hidden_indexable_content" do
    it "should have body as its indexable_content" do
      allow(document).to receive(:body).and_return("body text")

      allow(document).to receive(:hidden_indexable_content).and_return(nil)
      expect(formatter.indexable_attributes[:indexable_content]).to eq("body text")
    end
  end

  context "with hidden_indexable_content" do
    it "should have hidden_indexable_content as its indexable_content" do
      allow(document).to receive(:body).and_return("body text")
      allow(document).to receive(:hidden_indexable_content).and_return("hidden indexable content text")

      indexable = formatter.indexable_attributes[:indexable_content]
      expect(indexable).to eq("hidden indexable content text\nbody text")
    end
  end
<% end %>
end
